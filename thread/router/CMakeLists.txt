cmake_minimum_required(VERSION 3.2)
project(thread-router)

set(CMAKE_C_COMPILER "/usr/local/bin/arm-none-eabi-gcc")
set(CMAKE_CXX_COMPILER "/usr/local/bin/arm-none-eabi-g++")
set(SDK_ROOT "$ENV{HOME}/nonbackupped/nRF5_SDK_for_Thread_and_Zigbee_2.0.0")

add_definitions(-DNRF52840_XXAA)
add_definitions(-DBOARD_PCA10056)

include_directories("${PROJECT_SOURCE_DIR}/src")
include_directories("${SDK_ROOT}/external/fprintf")
include_directories("${SDK_ROOT}/components/thread/utils")
include_directories("${SDK_ROOT}/components/libraries/experimental_section_vars")
include_directories("${SDK_ROOT}/external/nrf_cc310/include")
include_directories("${SDK_ROOT}/components/libraries/atomic")
include_directories("${SDK_ROOT}/components/libraries/delay")
include_directories("${SDK_ROOT}/components/toolchain/cmsis/include")
include_directories("${SDK_ROOT}/components/libraries/balloc")
include_directories("${SDK_ROOT}/components/libraries/log")
include_directories("${SDK_ROOT}/components/libraries/memobj")
include_directories("${SDK_ROOT}/components")
include_directories("${SDK_ROOT}/modules/nrfx/mdk")
include_directories("${SDK_ROOT}/components/libraries/scheduler")
include_directories("${SDK_ROOT}/components/libraries/strerror")
include_directories("${SDK_ROOT}/integration/nrfx")
include_directories("${SDK_ROOT}/modules/nrfx/drivers/include")
include_directories("${SDK_ROOT}/components/libraries/ringbuf")
include_directories("${SDK_ROOT}/modules/nrfx")
include_directories("${SDK_ROOT}/components/drivers_nrf/nrf_soc_nosd")
include_directories("${SDK_ROOT}/components/libraries/log/src")
include_directories("${SDK_ROOT}/external/segger_rtt")
include_directories("${SDK_ROOT}/modules/nrfx/hal")
include_directories("${SDK_ROOT}/external/openthread/include")
include_directories("${SDK_ROOT}/components/libraries/bsp")
include_directories("${SDK_ROOT}/components/boards")
include_directories("${SDK_ROOT}/components/libraries/timer")
include_directories("${SDK_ROOT}/components/libraries/button")
include_directories("${SDK_ROOT}/integration/nrfx/legacy")
include_directories("${SDK_ROOT}/components/libraries/util")

file(GLOB_RECURSE SRC_LIST "${PROJECT_SOURCE_DIR}/src/*.*")

add_executable(${PROJECT_NAME} ${SRC_LIST})
